@using CompetitionResults.Data
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using System.Globalization
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject CompetitionStateService CompetitionState
@inject CompetitionService CompetitionService
@inject UserIdStateService UserIdStateService
@inject IStringLocalizer<SharedResource> L
@inject IJSRuntime JSRuntime
@implements IDisposable

<select value="@CompetitionState.SelectedCompetitionId" @onchange="OnSelectionChange" style="width: 400px; margin-top: 15px;">
    @if (competitions is null || competitions.Count == 0)
    {
        <option disabled selected>@L["No competitions available"]</option>
    }
    else
    {
        @foreach (var competition in competitions)
        {
            <option value="@competition.Id">@competition.Name</option>
        }
    }
</select>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@code {
    private const string SelectedCompetitionStorageKey = "competitionresults.selectedCompetitionId";

    private string errorMessage = string.Empty;
    private List<Competition>? competitions;
    private int? persistedCompetitionId;
    private bool canUseBrowserStorage;

    protected override async Task OnInitializedAsync()
    {
        CompetitionService.OnCompetitionsChanged += HandleCompetitionsChanged;

        await LoadCompetitionsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            canUseBrowserStorage = true;
            await RestorePersistedSelectionAsync();
        }
    }

    private async Task LoadCompetitionsAsync()
    {
        var userId = await UserIdStateService.GetUserIdAsync();
        if (string.IsNullOrEmpty(userId))
        {
            competitions = await CompetitionService.GetAllCompetitionsAsync();
        }
        else
        {
            competitions = await CompetitionService.GetCompetitionsForManagerAsync(userId);
        }

        await ApplySelectionAsync();
    }

    public void Dispose()
    {
        CompetitionService.OnCompetitionsChanged -= HandleCompetitionsChanged;
    }

    private async Task OnSelectionChange(ChangeEventArgs e)
    {
        if (!int.TryParse(e.Value?.ToString(), out var competitionId))
        {
            errorMessage = L["Invalid competition selection."];
            return;
        }

        if (competitions != null && competitions.Any(c => c.Id == competitionId))
        {
            CompetitionState.SelectedCompetitionId = competitionId;
            persistedCompetitionId = competitionId;
            errorMessage = string.Empty;
            await PersistSelectionAsync(competitionId);
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            errorMessage = L["Invalid competition selection."];
        }
    }

    private void HandleCompetitionsChanged()
    {
        _ = InvokeAsync(async () =>
        {
            await LoadCompetitionsAsync();
            StateHasChanged();
        });
    }

    private async Task ApplySelectionAsync()
    {
        if (competitions is null || competitions.Count == 0)
        {
            CompetitionState.SelectedCompetitionId = 0;
            persistedCompetitionId = null;
            await PersistSelectionAsync(null);
            errorMessage = string.Empty;
            return;
        }

        var currentSelection = CompetitionState.SelectedCompetitionId;
        var hasCurrentSelection = competitions.Any(c => c.Id == currentSelection);

        int desiredSelection;

        if (persistedCompetitionId.HasValue && competitions.Any(c => c.Id == persistedCompetitionId.Value))
        {
            desiredSelection = persistedCompetitionId.Value;
        }
        else if (hasCurrentSelection && currentSelection != 0)
        {
            desiredSelection = currentSelection;
        }
        else
        {
            desiredSelection = competitions[0].Id;
        }

        if (CompetitionState.SelectedCompetitionId != desiredSelection)
        {
            CompetitionState.SelectedCompetitionId = desiredSelection;
        }

        persistedCompetitionId = desiredSelection;
        await PersistSelectionAsync(desiredSelection);
    }

    private async Task RestorePersistedSelectionAsync()
    {
        if (!canUseBrowserStorage)
        {
            return;
        }

        try
        {
            var storedValue = await JSRuntime.InvokeAsync<string>("localStorage.getItem", SelectedCompetitionStorageKey);
            if (int.TryParse(storedValue, out var storedId))
            {
                persistedCompetitionId = storedId;
            }
            else
            {
                persistedCompetitionId = null;
            }
        }
        catch (JSException)
        {
            canUseBrowserStorage = false;
            persistedCompetitionId = null;
            return;
        }

        await ApplySelectionAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task PersistSelectionAsync(int? competitionId)
    {
        if (!canUseBrowserStorage)
        {
            return;
        }

        try
        {
            if (competitionId.HasValue)
            {
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", SelectedCompetitionStorageKey, competitionId.Value.ToString(CultureInfo.InvariantCulture));
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", SelectedCompetitionStorageKey);
            }
        }
        catch (JSException)
        {
            canUseBrowserStorage = false;
        }
    }
}
