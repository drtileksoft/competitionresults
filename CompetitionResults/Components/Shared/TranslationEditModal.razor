@using CompetitionResults.Data
@inject TranslationService TranslationService

<div class="modal fade @(IsOpen ? "show" : "")" style="display: @(IsOpen ? "block" : "none");">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <EditForm Model="@_translation" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="modal-header">
                    <h5 class="modal-title">Edit Translation</h5>
                    <button type="button" class="btn-close" @onclick="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-grid">
                        <div>
                            <label for="key">Key:</label>
                            <InputText id="key" @bind-Value="@_translation.Key" readonly />
                        </div>
                        <div>
                            <label for="value">Value:</label>
                            <InputText id="value" @bind-Value="@_translation.Value" />
                        </div>
                        <div>
                            <label for="language">Language:</label>
                            <InputText id="language" @bind-Value="@_translation.LocalLanguage" readonly />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    public bool IsOpen { get; private set; }
    [Parameter] public EventCallback OnClose { get; set; }
    private Translation _translation;

    protected override void OnInitialized()
    {
        _translation = new Translation();
    }

    [Parameter]
    public Translation Translation
    {
        get => _translation;
        set
        {
            if (_translation != value)
            {
                _translation = value;
            }
        }
    }

    [Parameter]
    public EventCallback OnFormSubmit { get; set; }

    private async Task HandleValidSubmit()
    {
        IsOpen = false;
        await TranslationService.AddOrUpdateTranslationAsync(_translation);
        await OnFormSubmit.InvokeAsync(null);
    }

    public void Open()
    {
        IsOpen = true;
        StateHasChanged();
    }

    private void Close()
    {
        IsOpen = false;
        StateHasChanged();
        OnClose.InvokeAsync();
    }
}
