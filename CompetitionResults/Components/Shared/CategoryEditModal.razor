@using CompetitionResults.Data
@inject CategoryService CategoryService
@inject IStringLocalizer<SharedResource> L

<div class="modal fade @(IsOpen ? "show" : "")" style="display: @(IsOpen ? "block" : "none");">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<EditForm Model="@_category" OnValidSubmit="HandleValidSubmit">
				<DataAnnotationsValidator />
				<ValidationSummary />
				<div class="modal-header">
					<h5 class="modal-title">@L["Edit Category"]</h5>
					<button type="button" class="btn-close" @onclick="Close"></button>
				</div>
				<div class="modal-body">

					<div class="form-grid">
						<div>
							<label for="name">@L["Name:"]</label>
							<InputText id="name" @bind-Value="@_category.Name" />
						</div>

						
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="Close">@L["Close"]</button>
					<button type="submit" class="btn btn-primary">@L["Save changes"]</button>
				</div>
			</EditForm>
		</div>
	</div>
</div>

@code {
	public bool IsOpen { get; private set; }
	[Parameter] public EventCallback OnClose { get; set; }
	private Category _category;

	protected override async Task OnInitializedAsync()
	{
		_category = new Category();
	}

	[Parameter]
	public Category Category
	{
		get => _category;
		set
		{
			if (_category != value)
			{
				_category = value;
			}
		}
	}

	[Parameter]
	public EventCallback OnFormSubmit { get; set; }

	private async Task HandleValidSubmit()
	{
		IsOpen = false;
		if (_category.Id == 0)
		{
			await CategoryService.AddCategoryAsync(_category);
		}
		else
		{
			await CategoryService.UpdateCategoryAsync(_category);
		}

		await OnFormSubmit.InvokeAsync(null);
	}

	public async void Open()
	{
		IsOpen = true;
		StateHasChanged();
	}

	private void Close()
	{
		IsOpen = false;
		StateHasChanged();
		OnClose.InvokeAsync();
	}

}
