@page "/throwers"
@using CompetitionResults.Data
@using CompetitionResults.Components.Shared
@using System.Linq
@using Microsoft.JSInterop
@inject ThrowerService ThrowerService
@inject CompetitionStateService CompetitionState
@inject CategoryService CategoryService
@inject CompetitionService CompetitionService
@implements IDisposable
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<SharedResource> L

<h3>@L["Throwers List"]</h3>
<AuthorizeView Roles="Admin, Manager">
        <Authorized>

                <button @onclick="AddNew">@L["Add New Thrower"]</button>
                <button @onclick="SendEmailsToUnpaid">@L["Send Emails to Unpaid Throwers"]</button>
        <button @onclick="OpenGeneralEmailModal">@L["Send Emails"]</button>

                <GeneralEmailModal @ref="generalEmailModal" OnSend="HandleSendGeneralEmails" />

                <ThrowerEditModal @ref="throwerEditModal" OnClose="HandleModalClose" Thrower="selectedThrower" OnFormSubmit="HandleFormSubmit" />

                <ConfirmationDialog @ref="confirmationDialog" />

                @if (throwers == null)
                {
                        <p><em>@L["Loading..."]</em></p>
                }
                else
                {
                        <table class="table">
                                <thead>
                                        <tr>
                                                <th role="button" @onclick="async () => await SortByColumnAsync(SortColumn.StartNumber)"># @GetSortIndicator(SortColumn.StartNumber)</th>
                                                <th role="button" @onclick="async () => await SortByColumnAsync(SortColumn.Name)">@L["Name"] @GetSortIndicator(SortColumn.Name)</th>
                                                <th role="button" @onclick="async () => await SortByColumnAsync(SortColumn.Surname)">@L["Surname"] @GetSortIndicator(SortColumn.Surname)</th>
                                                <th role="button" @onclick="async () => await SortByColumnAsync(SortColumn.Nickname)">@L["Nickname"] @GetSortIndicator(SortColumn.Nickname)</th>
                                                <th role="button" @onclick="async () => await SortByColumnAsync(SortColumn.Nationality)">@L["Nationality"] @GetSortIndicator(SortColumn.Nationality)</th>
                                                <th>@L["Flag"]</th>
                                                <th role="button" @onclick="async () => await SortByColumnAsync(SortColumn.ClubName)">@L["Club Name"] @GetSortIndicator(SortColumn.ClubName)</th>
                                                <th role="button" @onclick="async () => await SortByColumnAsync(SortColumn.Email)">@L["Email"] @GetSortIndicator(SortColumn.Email)</th>
                                                <th role="button" @onclick="async () => await SortByColumnAsync(SortColumn.CampingOnSite)">@L["Camping on site"] @GetSortIndicator(SortColumn.CampingOnSite)</th>
                                                <th role="button" @onclick="async () => await SortByColumnAsync(SortColumn.TShirt)">@L["Want T-Shirt (size)"] @GetSortIndicator(SortColumn.TShirt)</th>
                                                <th role="button" @onclick="async () => await SortByColumnAsync(SortColumn.Payment)">@L["Is paid (amount)"] @GetSortIndicator(SortColumn.Payment)</th>
                                                <th role="button" @onclick="async () => await SortByColumnAsync(SortColumn.ToBePaid)">@L["To Be Paid"] @GetSortIndicator(SortColumn.ToBePaid)</th>
                                                <th role="button" @onclick="async () => await SortByColumnAsync(SortColumn.Note)">@L["Note"] @GetSortIndicator(SortColumn.Note)</th>
                                                <th>@L["Actions"]</th>
                                        </tr>
                                </thead>
                                <tbody>
                                        @foreach (var thrower in SortedThrowers)
                                        {
                                                var lowerCaseCode = thrower.Nationality.ToLowerInvariant();
                                                var flagUrl = $"https://flagcdn.com/32x24/{lowerCaseCode}.png";
                                                decimal displayedDifference = GetDisplayedDifference(thrower);
                                                bool shouldHighlight = ShouldHighlightDifference(thrower, displayedDifference);
						<tr>
							<td>@thrower.StartingNumber.ToString("D3")</td>
							<td>@thrower.Name</td>
							<td>@thrower.Surname</td>
							<td>@thrower.Nickname</td>
							<td>@thrower.Nationality</td>
							<td>
								<img src="@flagUrl"
								alt="@thrower.Nationality"
								title="@thrower.Nationality"
								style="height:20px; width:30px;" />
							</td>
							<td>@thrower.ClubName</td>
							<td>@thrower.Email</td>
                                                        <td>@(thrower.IsCampingOnSite ? L["Yes"] : L["No"])</td>
                                                        <td>@(thrower.WantTShirt ? L["Yes"] : L["No"]) (@thrower.TShirtSize)</td>
                                                        <td style="background-color: @(!thrower.PaymentDone ? "red" : "white");">@(thrower.PaymentDone ? L["Yes"] : L["No"]) (@thrower.Payment) </td>
                                                        <td>
                                                                <span style="@(shouldHighlight ? "color:red;" : "")">@($"{displayedDifference}")</span>
                                                        </td>

							<td>
								@if (!string.IsNullOrEmpty(@thrower.Note))
								{
									<img src="https://img.icons8.com/ios/50/000000/note.png" style="height:20px; width:20px;" title="@thrower.Note" />
								}							
							</td>

							<td>
                                                                <button @onclick="() => SendEmail(thrower)">@L["Send registration email"]</button>
                                                                @if (!thrower.PaymentDone)
                                                                {
                                                                        <button @onclick="() => SendUnpaidEmail(thrower)">@L["Send unpaid email"]</button>
                                                                }
                                                                <button @onclick="() => EditThrower(thrower)">@L["Edit"]</button>
                                                                <button @onclick="() => DeleteThrower(thrower.Id)">@L["Delete"]</button>
							</td>
						</tr>
					}
				</tbody>
			</table>

			<div style="margin-top: 20px;">
				<p>
                                        <h4>@L["Total throwers: {0}", throwersCount]</h4>
                                        <h4>@L["Total payments: {0}", paymentsCount]</h4>
                                </p>
                                <p>
                                        <h4>@L["Total countries: {0}", countryCount]</h4>
                                        @foreach (var country in countryFlags)
                                        {
                                                var flagUrl = $"https://flagcdn.com/32x24/{country}.png";
                                                <img src="@flagUrl" alt="@country" title="@country" style="height:20px; width:30px; margin-left: 5px;" />
                                        }
                                </p>

                                <h4>@L["Categories:"]</h4>
                                <ul>
                                        @foreach (var category in categoriesDict)
                                        {
                                                <li>@category.Key: @category.Value</li>
                                        }
                                </ul>

                                <p>
                                        <h4>@L["Total campers: {0}", campersCount]</h4>
                                </p>

                                <h4>@L["T-shirts:"]</h4>
                                <ul>
                                        @foreach (var tshirt in tshirtDict.OrderBy(t => t.Key))
                                        {
                                                <li>@tshirt.Key: @tshirt.Value</li>
                                        }
                                </ul>

                                <p>
                                        <h4>@L["Throwers by country:"]</h4>
                                        <ul>
                                                @foreach (var country in countryParticipants.OrderByDescending(p => p.Value))
                                                {
                                                        var flagUrl = $"https://flagcdn.com/32x24/{country}.png";
							<li>@country.Key: @country.Value</li>
						}
					</ul>
				</p>

				<p>
                                        <h4>@L["Total missing payments above tolerance:"] <span style="color:red; font-weight:bold;">@($"{totalDifference:0.00}")</span></h4>
                                </p>
                        </div>
                }

        </Authorized>
        <NotAuthorized>
                <p>@L["You're not logged in."]</p>
        </NotAuthorized>
</AuthorizeView>

@code {
        private ThrowerEditModal throwerEditModal;
        private GeneralEmailModal generalEmailModal;
        private ConfirmationDialog? confirmationDialog;
        private List<Thrower> throwers;
        private Thrower selectedThrower = new Thrower();

        private const string SortPreferenceCookieName = "throwers-list-sort";
        private SortColumn CurrentSortColumn { get; set; } = SortColumn.StartNumber;
        private bool SortAscending { get; set; } = true;
        private bool sortPreferenceLoaded;

        private IEnumerable<Thrower> SortedThrowers => ApplySort(throwers ?? Enumerable.Empty<Thrower>());

        private Dictionary<string, int> categoriesDict;
	private int countryCount;
	private int throwersCount => throwers.Count;
	private int paymentsCount => throwers.Count(t => t.PaymentDone);
	private Dictionary<string, int> countryParticipants;
	private List<string> countryFlags;
	private int campersCount;
	private Dictionary<string, int> tshirtDict;
	private decimal totalDifference;


        protected override async Task OnInitializedAsync()
        {
                CompetitionState.OnCompetitionChanged += LoadData;
                LoadData();
        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
                if (firstRender)
                {
                        await LoadSortPreferenceAsync();
                        sortPreferenceLoaded = true;
                        StateHasChanged();
                }
        }

	private async void LoadData()
	{
		throwers = await ThrowerService.GetAllThrowersAsync(CompetitionState.SelectedCompetitionId);

		campersCount = throwers.Count(t => t.IsCampingOnSite);

		var categories = await CategoryService.GetAllCategoriesAsync(CompetitionState.SelectedCompetitionId);
		categoriesDict = new Dictionary<string, int>();
		foreach (var category in categories)
		{
			categoriesDict.Add(category.Name, throwers.Count(t => t.CategoryId == category.Id));
		}

		tshirtDict = throwers
			.GroupBy(t => new { t.TShirtSize, t.Category })
			.Where(g => g.Key.TShirtSize != null)
			.ToDictionary(g => g.Key.Category.Name + " - " + g.Key.TShirtSize, g => g.Count());


		countryCount = throwers.GroupBy(t => t.Nationality).Count();

		countryFlags = throwers.GroupBy(t => t.Nationality)
			.Select(g => g.Key.ToLowerInvariant())
			.Distinct()
			.ToList();

		countryParticipants = throwers.GroupBy(t => t.Nationality)
			.ToDictionary(g => g.Key, g => g.Count());

                totalDifference = throwers.Sum(t => GetOutstandingAmount(t));

		StateHasChanged();
	}

	public void Dispose()
	{
		CompetitionState.OnCompetitionChanged -= LoadData;
	}

        private async void AddNew()
        {
                var competition = await CompetitionService.GetCompetitionByIdAsync(CompetitionState.SelectedCompetitionId);
                var defaultNat = competition?.LocalLanguage ?? "";
                selectedThrower = new Thrower { Nationality = defaultNat, CompetitionId = CompetitionState.SelectedCompetitionId }; // Reset the form for a new thrower
		selectedThrower.CategoryId = (await CategoryService.GetAllCategoriesAsync(CompetitionState.SelectedCompetitionId)).FirstOrDefault()?.Id ?? 0;
		throwerEditModal.Open();
		StateHasChanged();
	}

	private void EditThrower(Thrower thrower)
	{
		selectedThrower = thrower; // Set the form to edit the selected thrower
		throwerEditModal.Open();
	}

	private async Task SendEmail(Thrower thrower)
	{
        if (confirmationDialog is null)
        {
            return;
        }

        var confirmed = await confirmationDialog.ShowAsync(
            L["Confirmation"].Value,
            L["Are you sure you want to send registration email to this thrower?"].Value,
            L["Yes"].Value,
            L["Cancel"].Value);

        if (confirmed)
        {
                await ThrowerService.ResendEmailAsync(thrower);
        }
	}

        private async Task SendUnpaidEmail(Thrower thrower)
        {
        if (confirmationDialog is null)
        {
            return;
        }

        var confirmed = await confirmationDialog.ShowAsync(
            L["Confirmation"].Value,
            L["Are you sure you want to send unpaid email to this thrower?"].Value,
            L["Yes"].Value,
            L["Cancel"].Value);

        if (confirmed)
        {
            await ThrowerService.SendUnpaidEmail(thrower);
        }
        }

        private async Task SendEmailsToUnpaid()
        {
                if (confirmationDialog is null)
                {
                        return;
                }

                var unpaidThrowers = throwers.Where(t => !t.PaymentDone).ToList();
                if (unpaidThrowers.Any())
                {
            var confirmed = await confirmationDialog.ShowAsync(
                L["Confirmation"].Value,
                L["Are you sure you want to send emails to {0} unpaid throwers?", unpaidThrowers.Count].Value,
                L["Yes"].Value,
                L["Cancel"].Value);

            if (confirmed)
            {
                foreach (var thrower in unpaidThrowers)
                {
                        await ThrowerService.SendUnpaidEmail(thrower);
                }

                await confirmationDialog.ShowAsync(
                    L["Information"].Value,
                    L["Emails sent to unpaid throwers."].Value,
                    L["OK"].Value);
            }
                }
                else
                {
            await confirmationDialog.ShowAsync(
                L["Information"].Value,
                L["No unpaid throwers to send emails to."].Value,
                L["OK"].Value);
                }
        }

        private async Task SendEmails(string localMessage, string englishMessage)
        {
                if (confirmationDialog is null)
                {
                        return;
                }

                var allThrowers = throwers.ToList();
                if (allThrowers.Any())
                {
            var confirmed = await confirmationDialog.ShowAsync(
                L["Confirmation"].Value,
                L["Are you sure you want to send emails to {0} throwers?", allThrowers.Count].Value,
                L["Yes"].Value,
                L["Cancel"].Value);

            if (confirmed)
            {
                foreach (var thrower in allThrowers)
                {
                        ThrowerService.SendGeneralEmail(thrower, localMessage, englishMessage);
                }

                await confirmationDialog.ShowAsync(
                    L["Information"].Value,
                    L["Emails sent to throwers."].Value,
                    L["OK"].Value);
            }
                }
                else
                {
            await confirmationDialog.ShowAsync(
                L["Information"].Value,
                L["No throwers to send emails to."].Value,
                L["OK"].Value);
                }
        }

        private async Task DeleteThrower(int id)
        {
        if (confirmationDialog is null)
        {
            return;
        }

        var confirmed = await confirmationDialog.ShowAsync(
            L["Confirmation"].Value,
            L["Are you sure you want to delete this thrower?"].Value,
            L["Yes"].Value,
            L["Cancel"].Value);

        if (confirmed)
        {
                await ThrowerService.DeleteThrowerAsync(id);
                LoadData();
        }
        }

        private decimal CalculateTargetPayment(Thrower thrower)
        {
                if (thrower.PaymentDone)
                {
                        var competition = thrower.Competition;
                        if (thrower.Payment < 200) // Assume EUR
                        {
                                var basePrice = competition?.CompetitionPriceEUR ?? 0;
								var tshirtPrice = competition?.TShirtPriceEUR ?? 0;
				return thrower.WantTShirt ? basePrice + tshirtPrice : basePrice;
                        }
                        else // Assume Local currency
                        {
                                var basePrice = competition?.CompetitionPriceLocal ?? 0;
								var tshirtPrice = competition?.TShirtPriceLocal ?? 0;
				return thrower.WantTShirt ? basePrice + tshirtPrice : basePrice;
                        }
                }
                return 0;
        }

	private decimal GetTolerance(double? payment)
	{
		if (payment.HasValue)
		{
			return payment.Value < 200 ? 2 : 50; // 2 EUR or 50 CZK tolerance
		}
		else
		{
			return 0;
		}
	}


        private IEnumerable<Thrower> ApplySort(IEnumerable<Thrower> source)
        {
                return CurrentSortColumn switch
                {
                        SortColumn.Name => SortAscending
                                ? source.OrderBy(t => t.Name, StringComparer.OrdinalIgnoreCase).ThenBy(t => t.Surname, StringComparer.OrdinalIgnoreCase)
                                : source.OrderByDescending(t => t.Name, StringComparer.OrdinalIgnoreCase).ThenByDescending(t => t.Surname, StringComparer.OrdinalIgnoreCase),
                        SortColumn.Surname => SortAscending
                                ? source.OrderBy(t => t.Surname, StringComparer.OrdinalIgnoreCase).ThenBy(t => t.Name, StringComparer.OrdinalIgnoreCase)
                                : source.OrderByDescending(t => t.Surname, StringComparer.OrdinalIgnoreCase).ThenByDescending(t => t.Name, StringComparer.OrdinalIgnoreCase),
                        SortColumn.Nickname => SortAscending
                                ? source.OrderBy(t => t.Nickname ?? string.Empty, StringComparer.OrdinalIgnoreCase)
                                        .ThenBy(t => t.Surname, StringComparer.OrdinalIgnoreCase)
                                : source.OrderByDescending(t => t.Nickname ?? string.Empty, StringComparer.OrdinalIgnoreCase)
                                        .ThenByDescending(t => t.Surname, StringComparer.OrdinalIgnoreCase),
                        SortColumn.Nationality => SortAscending
                                ? source.OrderBy(t => t.Nationality, StringComparer.OrdinalIgnoreCase)
                                        .ThenBy(t => t.Surname, StringComparer.OrdinalIgnoreCase)
                                : source.OrderByDescending(t => t.Nationality, StringComparer.OrdinalIgnoreCase)
                                        .ThenByDescending(t => t.Surname, StringComparer.OrdinalIgnoreCase),
                        SortColumn.ClubName => SortAscending
                                ? source.OrderBy(t => t.ClubName ?? string.Empty, StringComparer.OrdinalIgnoreCase)
                                        .ThenBy(t => t.Surname, StringComparer.OrdinalIgnoreCase)
                                : source.OrderByDescending(t => t.ClubName ?? string.Empty, StringComparer.OrdinalIgnoreCase)
                                        .ThenByDescending(t => t.Surname, StringComparer.OrdinalIgnoreCase),
                        SortColumn.Email => SortAscending
                                ? source.OrderBy(t => t.Email ?? string.Empty, StringComparer.OrdinalIgnoreCase)
                                        .ThenBy(t => t.Surname, StringComparer.OrdinalIgnoreCase)
                                : source.OrderByDescending(t => t.Email ?? string.Empty, StringComparer.OrdinalIgnoreCase)
                                        .ThenByDescending(t => t.Surname, StringComparer.OrdinalIgnoreCase),
                        SortColumn.CampingOnSite => SortAscending
                                ? source.OrderBy(t => t.IsCampingOnSite).ThenBy(t => t.StartingNumber)
                                : source.OrderByDescending(t => t.IsCampingOnSite).ThenByDescending(t => t.StartingNumber),
                        SortColumn.TShirt => SortAscending
                                ? source.OrderBy(t => t.WantTShirt).ThenBy(t => t.TShirtSize ?? string.Empty, StringComparer.OrdinalIgnoreCase)
                                : source.OrderByDescending(t => t.WantTShirt).ThenByDescending(t => t.TShirtSize ?? string.Empty, StringComparer.OrdinalIgnoreCase),
                        SortColumn.Payment => SortAscending
                                ? source.OrderBy(t => t.PaymentDone).ThenBy(t => t.Payment ?? 0)
                                : source.OrderByDescending(t => t.PaymentDone).ThenByDescending(t => t.Payment ?? 0),
                        SortColumn.ToBePaid => SortAscending
                                ? source.OrderBy(GetDisplayedDifference).ThenBy(t => t.StartingNumber)
                                : source.OrderByDescending(GetDisplayedDifference).ThenByDescending(t => t.StartingNumber),
                        SortColumn.Note => SortAscending
                                ? source.OrderBy(t => t.Note ?? string.Empty, StringComparer.OrdinalIgnoreCase)
                                        .ThenBy(t => t.Surname, StringComparer.OrdinalIgnoreCase)
                                : source.OrderByDescending(t => t.Note ?? string.Empty, StringComparer.OrdinalIgnoreCase)
                                        .ThenByDescending(t => t.Surname, StringComparer.OrdinalIgnoreCase),
                        _ => SortAscending
                                ? source.OrderBy(t => t.StartingNumber)
                                : source.OrderByDescending(t => t.StartingNumber)
                };
        }

        private async Task SortByColumnAsync(SortColumn column)
        {
                if (CurrentSortColumn == column)
                {
                        SortAscending = !SortAscending;
                }
                else
                {
                        CurrentSortColumn = column;
                        SortAscending = true;
                }

                await SaveSortPreferenceAsync();
                StateHasChanged();
        }

        private string GetSortIndicator(SortColumn column)
        {
                if (CurrentSortColumn == column)
                {
                        return SortAscending ? "▲" : "▼";
                }

                return string.Empty;
        }

        private async Task LoadSortPreferenceAsync()
        {
                try
                {
                        var storedValue = await JSRuntime.InvokeAsync<string>("throwersList.getSortPreference", SortPreferenceCookieName);
                        if (!string.IsNullOrEmpty(storedValue))
                        {
                                var parts = storedValue.Split('|');
                                if (parts.Length >= 1 && Enum.TryParse(parts[0], out SortColumn column))
                                {
                                        CurrentSortColumn = column;
                                        if (parts.Length >= 2)
                                        {
                                                SortAscending = !string.Equals(parts[1], "desc", StringComparison.OrdinalIgnoreCase);
                                        }
                                }
                        }
                }
                catch (JSException)
                {
                        // Ignore errors when accessing cookies via JS interop
                }
        }

        private async Task SaveSortPreferenceAsync()
        {
                if (!sortPreferenceLoaded)
                {
                        return;
                }

                try
                {
                        var preference = $"{CurrentSortColumn}|{(SortAscending ? "asc" : "desc")}";
                        await JSRuntime.InvokeVoidAsync("throwersList.setSortPreference", SortPreferenceCookieName, preference, 365);
                }
                catch (JSException)
                {
                        // Ignore errors when storing cookies via JS interop
                }
        }

        private decimal GetDisplayedDifference(Thrower thrower)
        {
                decimal target = CalculateTargetPayment(thrower);
                decimal paid = thrower.Payment.HasValue ? Convert.ToDecimal(thrower.Payment.Value) : 0;
                decimal difference = target - paid;
                return difference < 0 ? 0 : difference;
        }

        private bool ShouldHighlightDifference(Thrower thrower, decimal displayedDifference)
        {
                return displayedDifference > GetTolerance(thrower.Payment);
        }

        private decimal GetOutstandingAmount(Thrower thrower)
        {
                var difference = GetDisplayedDifference(thrower);
                return ShouldHighlightDifference(thrower, difference) ? difference : 0;
        }

        private enum SortColumn
        {
                StartNumber,
                Name,
                Surname,
                Nickname,
                Nationality,
                ClubName,
                Email,
                CampingOnSite,
                TShirt,
                Payment,
                ToBePaid,
                Note
        }

        private async Task HandleFormSubmit()
        {
                LoadData();
        }

        private async Task HandleModalClose()
        {
                LoadData();
        }

        private void OpenGeneralEmailModal()
        {
                generalEmailModal.Open();
        }

        private async Task HandleSendGeneralEmails(GeneralEmailModal.GeneralEmailContent content)
        {
                await SendEmails(content.LocalMessage, content.EnglishMessage);
        }
}

