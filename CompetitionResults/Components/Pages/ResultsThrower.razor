@page "/resultsthrower"
@using CompetitionResults.Data
@inject ResultService ResultsService
@inject ThrowerService ThrowerService
@inject DisciplineService DisciplineService
@inject CategoryService CategoryService
@inject CompetitionStateService CompetitionState
@inject IStringLocalizer<SharedResource> L

<h3>@L["Results by thrower"]</h3>

@if (throwers == null || disciplines == null || categories == null)
{
    <p><em>@L["Loading..."]</em></p>
}
else
{
    <div class="d-flex flex-wrap mb-4">
        @foreach (var thrower in throwers)
        {
            <button class="btn btn-outline-primary m-1" @onclick="@(() => SelectThrower(thrower.Id))">
                @thrower.Name @thrower.Surname @if (!string.IsNullOrEmpty(thrower.Nickname)) { <span class="text-muted">(@thrower.Nickname)</span> }
            </button>
        }
    </div>

    @if (selectedThrowerResults != null)
    {
        var thrower = throwers.First(t => t.Id == selectedThrowerId);
        <h4>@string.Format(L["Results for {0}"]!, thrower.Name)</h4>

        <div class="d-flex flex-wrap">
            @foreach (var group in selectedThrowerResults
                .GroupBy(r => r.DisciplineId)
                .Where(g => g.Any(r => r.Points.HasValue))
                .OrderBy(g => g.Min(r => r.Position)))
            {
                var disciplineId = group.Key;

                if (!allDisciplineResults.TryGetValue(disciplineId, out var fullGroup))
                    continue;

                var discipline = disciplines.FirstOrDefault(d => d.Id == disciplineId);
                var disciplineName = discipline?.Name ?? $"Discipline {disciplineId}";
                var isDivided = discipline?.IsDividedToCategories ?? false;

                foreach (var result in group.OrderBy(r => r.Position))
                {
                    var category = categories.FirstOrDefault(c => c.Id == result.CategoryId);

                    <div class="result-card m-2 p-2 border rounded" style="@result.BackgroundColor">
                        <div><strong>@L["Discipline:"]</strong> @disciplineName</div>
                        @if (isDivided && category != null)
                        {
                            <div><strong>@L["Category:"]</strong> @category.Name</div>
                        }
                        @if (result.Position > 0)
                        {
                            <div><strong>@L["Position:"]</strong> @result.Position</div>
                        }
                        <div><strong>@L["Points:"]</strong> @result.Points @if (result.BullseyeCount.HasValue) { <span>(@result.BullseyeCount)</span> }</div>
                    </div>
                }
            }
        </div>
    }
}

@code {
    private List<Thrower> throwers;
    private List<Discipline> disciplines;
    private List<Category> categories;
    private int selectedThrowerId;
    private List<ResultDto> selectedThrowerResults;
    private Dictionary<int, List<ResultDto>> allDisciplineResults = new();

    protected override async Task OnInitializedAsync()
    {
        var compId = CompetitionState.SelectedCompetitionId;
        throwers = await ThrowerService.GetAllThrowersAsync(compId);
        disciplines = await DisciplineService.GetAllDisciplinesAsync(compId);
        categories = await CategoryService.GetAllCategoriesAsync(compId);
    }

    private async Task SelectThrower(int throwerId)
    {
        selectedThrowerId = throwerId;
        selectedThrowerResults = new();
        allDisciplineResults = new();

        var compId = CompetitionState.SelectedCompetitionId;

        foreach (var disc in disciplines)
        {
            var discResults = await ResultsService.GetRankedResultsAsync(disc.Id, compId);
            allDisciplineResults[disc.Id] = discResults;

            selectedThrowerResults.AddRange(discResults.Where(r => r.ThrowerId == throwerId));
        }

        StateHasChanged();
    }
}
