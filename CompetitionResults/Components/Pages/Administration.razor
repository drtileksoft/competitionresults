@page "/administration"
@using CompetitionResults.Data
@using Microsoft.AspNetCore.Authorization;
@using CompetitionResults.Constants
@using Microsoft.AspNetCore.Identity;
@using System.Linq;
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CompetitionService CompetitionService
@inject CompetitionStateService CompetitionState
@inject IStringLocalizer<SharedResource> L
<h3>@L["Administration"]</h3>
<AuthorizeView Roles="Admin, Manager, User">
	<Authorized>
		@if (@context.User.IsInRole(ADMINISTRATION_ROLE) || @context.User.IsInRole(MANAGER_ROLE) || @context.User.IsInRole(USER_ROLE))
		{
                        <table class="table">
                                <thead>
                                        <tr>
                                                <th>@L["Id"]</th>
                                                <th>@L["User Name"]</th>
                                                <th>@L["Email"]</th>
                                                <th>@L["Action"]</th>
                                        </tr>
                                </thead>
				<tbody>
					@foreach (var user in ColUsers)
					{
						<tr>
							<td>@user.Id.Substring(0, 5) ...</td>
							<td>@user.UserName</td>
							<td>@user.Email</td>
							<td>
								<!-- Edit the current forecast -->
                                                                <button class="btn btn-primary"
                                                                                @onclick="(() => EditUser(user))">
                                                                        @L["Edit"]
                                                                </button>
							</td>
						</tr>
					}
				</tbody>
			</table>

			@if (ShowPopup)
			{
				<!-- This is the popup to create or edit a user -->
				<div class="modal" tabindex="-1" style="display:block" role="dialog">
					<div class="modal-dialog">
						<div class="modal-content">
							<div class="modal-header">
                                                                <h3 class="modal-title">@L["Edit User"]</h3>
								<!-- Button to close the popup -->
								<button type="button" class="close"
										@onclick="ClosePopup">
									<span aria-hidden="true">X</span>
								</button>
							</div>
							<!-- Edit form for the current user -->
							<div class="modal-body">
								<!-- Only show Id if not a new user -->
								@if (objUser.Id != "")
								{
									<p>@objUser.Id</p>
								}
								<!-- Only allow edit if a new user -->
								@if (objUser.Id != "")
								{
									<p>@objUser.UserName</p>
								}
								else
								{
                                                                        <input class="form-control" type="text"
                                                                                   placeholder='@L["User Name"]'
                                                                                   @bind="objUser.UserName" />
                                                                }
                                                                <input class="form-control" type="text"
                                                                           placeholder='@L["Email"]'
                                                                           @bind="objUser.Email" />
                                                                <input class="form-control" type="password"
                                                                           placeholder='@L["Password"]'
                                                                           @bind="objUser.PasswordHash" />
								<select class="form-control"
										@bind="@CurrentUserRole">
									@foreach (var option in Options)
									{
										<option value="@option">
											@option
										</option>
									}
								</select>
								<br /><br />
								<!-- Button to save the user -->
                                                                <button class="btn btn-primary"
                                                                                @onclick="SaveUser">
                                                                        @L["Save"]
                                                                </button>
								<!-- Only show delete button if not a new record -->
								@if (objUser.Id != "")
								{
									<!-- Button to delete the forecast -->
                                                                        <button class="btn btn-danger"
                                                                                        @onclick="DeleteUser">
                                                                                @L["Delete"]
                                                                        </button>
								}
								<br />
								<span style="color:red">@strError</span>
							</div>
						</div>
					</div>
				</div>
			}
			@if (@context.User.IsInRole(ADMINISTRATION_ROLE) || @context.User.IsInRole(MANAGER_ROLE))
			{
                                <button class="btn btn-success" @onclick="AddNewUser">@L["Add User"]</button>
			}
		}
		else
		{
                        <p>@string.Format(L["You're not signed in as a user in {0}."]!, ADMINISTRATION_ROLE)</p>
                }
        </Authorized>
        <NotAuthorized>
                <p>@L["You're not logged in."]</p>
        </NotAuthorized>
</AuthorizeView>
@code {
	// Property used to add or edit the currently selected user
	ApplicationUser objUser = new ApplicationUser();
	// Tracks the selected role for the currently selected user
        string CurrentUserRole { get; set; } = RoleNames.User;
	// Collection to display the existing users
	List<ApplicationUser> ColUsers = new List<ApplicationUser>();
	// Options to display in the roles dropdown when editing a user
	List<string> Options = new List<string>();
	// To hold any possible errors
	string strError = "";
	// To enable showing the Popup
	bool ShowPopup = false;

	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }
        string ADMINISTRATION_ROLE = RoleNames.Admin;
        string MANAGER_ROLE = RoleNames.Manager;
        string USER_ROLE = RoleNames.User;
        System.Security.Claims.ClaimsPrincipal CurrentUser;
        ApplicationUser CurrentApplicationUser;
        protected override async Task OnInitializedAsync()
        {
		// ensure there is a ADMINISTRATION_ROLE
		var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
		if (RoleResult == null)
		{
			// Create ADMINISTRATION_ROLE Role
			await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
		}
		// Ensure a user named Admin@BlazorHelpWebsite.com is an Administrator
                var user = await _UserManager.FindByNameAsync(AppDefaults.AdminEmail);
		if (user != null)
		{
			// Is Admin@BlazorHelpWebsite.com in administrator role?
			var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
			if (!UserResult)
			{
				// Put admin in Administrator role
				await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
			}
		}
		// Get the current logged in user
		CurrentUser = (await authenticationStateTask).User;

		CurrentApplicationUser = await _UserManager.FindByNameAsync(CurrentUser.Identity.Name);

                if (CurrentUser.IsInRole(ADMINISTRATION_ROLE))
                {
                        Options = new List<string>() { RoleNames.User, RoleNames.Manager, RoleNames.Admin };
                }

                if (CurrentUser.IsInRole(MANAGER_ROLE))
                {
                        Options = new List<string>() { RoleNames.User, RoleNames.Manager };
                }

                if (CurrentUser.IsInRole(USER_ROLE))
                {
                        Options = new List<string>() { RoleNames.User };
                }

		GetUsers();
	}

	public async void GetUsers()
	{
		// clear any error messages
		strError = "";
		// Collection to hold users
		ColUsers = new List<ApplicationUser>();

		if (CurrentUser.IsInRole(ADMINISTRATION_ROLE))
		{
			// get users from _UserManager
			var user = _UserManager.Users.Select(x => new ApplicationUser
				{
					Id = x.Id,
					UserName = x.UserName,
					Email = x.Email,
					PasswordHash = "*****"
				});
			foreach (var item in user)
			{
				ColUsers.Add(item);
			}
		}

                if (CurrentUser.IsInRole(MANAGER_ROLE))
                {
                        var admins = (await _UserManager.GetUsersInRoleAsync(RoleNames.Admin)).Select(a => a.Id).ToHashSet();
                        var managers = await CompetitionService.GetManagersForCompetitionAsync(CompetitionState.SelectedCompetitionId);
                        foreach (var item in managers)
                        {
                                if (!admins.Contains(item.Id))
                                {
                                        ColUsers.Add(new ApplicationUser
                                        {
                                                Id = item.Id,
                                                UserName = item.UserName,
                                                Email = item.Email,
                                                PasswordHash = "*****"
                                        });
                                }
                        }
                }

                if (CurrentUser.IsInRole(USER_ROLE))
                {
                        var user = _UserManager.Users.Where(u => u.UserName == CurrentUser.Identity.Name).Select(x => new ApplicationUser
                                {
                                        Id = x.Id,
                                        UserName = x.UserName,
                                        Email = x.Email,
                                        PasswordHash = "*****"
                                });
                        foreach (var item in user)
                        {
                                ColUsers.Add(item);
                        }
                }
	}

	void AddNewUser()
	{
		// Make new user
		objUser = new ApplicationUser();
		objUser.PasswordHash = "*****";
		// Set Id to blank so we know it is a new record
		objUser.Id = "";
		// Open the Popup
		ShowPopup = true;
	}

	async Task SaveUser()
{
	try
	{
		strError = "";

		// EDITUJEME EXISTUJÍCÍHO UŽIVATELE
		if (!string.IsNullOrEmpty(objUser.Id))
		{
			var user = await _UserManager.FindByIdAsync(objUser.Id);
			if (user == null)
			{
				strError = "User not found.";
				return;
			}

			user.Email = objUser.Email;
			await _UserManager.UpdateAsync(user);

			// Změna hesla (pokud nebylo ponecháno jako "*****")
			if (objUser.PasswordHash != "*****")
			{
				var resetToken = await _UserManager.GeneratePasswordResetTokenAsync(user);
				var passwordResult = await _UserManager.ResetPasswordAsync(user, resetToken, objUser.PasswordHash);
				if (!passwordResult.Succeeded)
				{
					strError = passwordResult.Errors.FirstOrDefault()?.Description ?? "Password error";
					return;
				}
			}

			// Odebrání všech rolí a přidání nové
			var currentRoles = await _UserManager.GetRolesAsync(user);
			await _UserManager.RemoveFromRolesAsync(user, currentRoles);
			if (!string.IsNullOrEmpty(CurrentUserRole))
			{
				await _UserManager.AddToRoleAsync(user, CurrentUserRole);
			}
		}
		else // VYTVOŘENÍ NOVÉHO UŽIVATELE
		{
			var newUser = new ApplicationUser
			{
				UserName = objUser.UserName,
				Email = objUser.Email,
				EmailConfirmed = true,
				DomainName = CurrentApplicationUser.DomainName
			};

			var createResult = await _UserManager.CreateAsync(newUser, objUser.PasswordHash);
			if (!createResult.Succeeded)
			{
				strError = createResult.Errors.FirstOrDefault()?.Description ?? "User creation failed.";
				return;
			}

                        if (!string.IsNullOrEmpty(CurrentUserRole))
                        {
                                await _UserManager.AddToRoleAsync(newUser, CurrentUserRole);
                        }

                        if (CurrentUser.IsInRole(ADMINISTRATION_ROLE))
                        {
                                await CompetitionService.AssignManagerToCompetitionAsync(newUser.Id, CompetitionState.SelectedCompetitionId);
                        }
                }

		ShowPopup = false;
		GetUsers(); // Refresh tabulky
	}
	catch (Exception ex)
	{
		strError = ex.GetBaseException().Message;
	}
}


	async Task EditUser(ApplicationUser _ApplicationUser)
	{
		// Set the selected user
		// as the current user
		objUser = _ApplicationUser;
		// Get the user
		var user = await _UserManager.FindByIdAsync(objUser.Id);
		if (user != null)
		{
			// Is user in administrator role?
			var UserResult =
				await _UserManager
				.IsInRoleAsync(user, ADMINISTRATION_ROLE);
			if (UserResult)
			{
				CurrentUserRole = ADMINISTRATION_ROLE;
			}
			// else
			// {
			// 	CurrentUserRole = "User";
			// }

			var UserResult2 =
				await _UserManager
				.IsInRoleAsync(user, MANAGER_ROLE);
			if (UserResult2)
			{
				CurrentUserRole = MANAGER_ROLE;
			}

			var UserResult3 =
				await _UserManager
				.IsInRoleAsync(user, USER_ROLE);
			if (UserResult3)
			{
				CurrentUserRole = USER_ROLE;
			}

		}
		// Open the Popup
		ShowPopup = true;
	}

	async Task DeleteUser()
	{
		// Close the Popup
		ShowPopup = false;
		// Get the user
		var user = await _UserManager.FindByIdAsync(objUser.Id);
		if (user != null)
		{
			// Delete the user
			await _UserManager.DeleteAsync(user);
		}
		// Refresh Users
		GetUsers();
	}

	void ClosePopup()
	{
		// Close the Popup
		ShowPopup = false;
	}
}