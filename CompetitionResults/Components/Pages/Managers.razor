@page "/managers"
@using CompetitionResults.Data
@using CompetitionResults.Constants
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@inject CompetitionService CompetitionServiceInstance
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject UserIdStateService UserIdStateService

<h3>Competition Manager Assignments</h3>

<AuthorizeView Roles="Admin,Manager">
    <Authorized>
        <div class="row mb-3">
            <div class="col-md-4">
                <label>Select manager:</label>
                <select class="form-control" @onchange="OnUserChanged">
                    <option value="">-- Select Manager --</option>
                    @foreach (var user in users)
                    {
                        <option value="@user.Id" selected="@(selectedUser?.Id == user.Id)">@user.UserName</option>
                    }
                </select>
            </div>
        </div>

        @if (selectedUser != null)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Competition</th>
                        <th class="text-center">Assigned</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var comp in competitions)
                    {
                        <tr>
                            <td>@comp.Name</td>
                            <td class="text-center">
                                <input type="checkbox" checked="@IsAssigned(comp.Id)" @onchange="e => OnAssignmentChanged(comp.Id, (bool)e.Value)" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
</AuthorizeView>

@code {
    private List<ApplicationUser> users = new();
    private List<Competition> competitions = new();
    private ApplicationUser selectedUser;
    private HashSet<int> assignedCompetitionIds = new();
    private ApplicationUser currentUser;
    private bool isAdmin;
    private bool isManager;

    protected override async Task OnInitializedAsync()
    {
        var currentUserId = await UserIdStateService.GetUserIdAsync();
        currentUser = await UserManager.FindByIdAsync(currentUserId);

        isAdmin = await UserManager.IsInRoleAsync(currentUser, RoleNames.Admin);
        isManager = await UserManager.IsInRoleAsync(currentUser, RoleNames.Manager);

        if (isAdmin)
        {
            users = UserManager.Users.ToList();
            competitions = await CompetitionServiceInstance.GetAllCompetitionsAsync();
        }
        else if (isManager)
        {
            var userUsers = await UserManager.GetUsersInRoleAsync(RoleNames.User);
            users = userUsers.Where(u => u.Id != currentUserId).ToList();
            competitions = await CompetitionServiceInstance.GetCompetitionsForManagerAsync(currentUserId);
        }
    }

    private async Task OnUserChanged(ChangeEventArgs e)
    {
        var userId = e.Value?.ToString();
        selectedUser = users.FirstOrDefault(u => u.Id == userId);

        if (selectedUser != null)
        {
            var comps = await CompetitionServiceInstance.GetCompetitionsForManagerAsync(selectedUser.Id);
            assignedCompetitionIds = comps.Select(c => c.Id).ToHashSet();
        }
    }

    private bool IsAssigned(int competitionId) => assignedCompetitionIds.Contains(competitionId);

    private async Task OnAssignmentChanged(int competitionId, bool assign)
    {
        if (selectedUser == null)
        {
            return;
        }

        if (!isAdmin)
        {
            var roles = await UserManager.GetRolesAsync(selectedUser);
            if (roles.Contains(RoleNames.Admin) || roles.Contains(RoleNames.Manager) || selectedUser.Id == currentUser.Id)
            {
                return;
            }
        }

        if (assign)
        {
            await CompetitionServiceInstance.AssignManagerToCompetitionAsync(selectedUser.Id, competitionId);
            assignedCompetitionIds.Add(competitionId);
        }
        else
        {
            await CompetitionServiceInstance.RemoveManagerFromCompetitionAsync(selectedUser.Id, competitionId);
            assignedCompetitionIds.Remove(competitionId);
        }
    }
}
