@page "/competitions"
@using CompetitionResults.Data
@using CompetitionResults.Components.Shared
@using System.Security.Claims
@inject CompetitionService CompetitionService
@inject UserIdStateService UserIdStateService
@inject IStringLocalizer<SharedResource> L

<h3>@L["Competitions List"]</h3>
<AuthorizeView Roles="Admin, Manager">
    <Authorized>
        <button @onclick="AddNew">@L["Add New Competition"]</button>

        <CompetitionEditModal @ref="competitionEditModal" OnClose="HandleModalClose" Category="currentCompetition" OnFormSubmit="HandleFormSubmit" />
        <ConfirmationDialog @ref="confirmationDialog" />

        @if (competitions == null)
        {
            <p><em>@L["Loading..."]</em></p>
        }
        else if (!competitions.Any())
        {
            <p>@L["No competitions found."]</p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>@L["Name"]</th>
                        <th>@L["Description"]</th>
                        <th>@L["Camping"]</th>
                        <th>@L["T-Shirt"]</th>
                        <th>@L["T-Shirt Link"]</th>
                        <th>@L["Actions"]</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in competitions)
                    {
                        <tr>
                            <td>@category.Name</td>
                            <td>@category.Description</td>
                            <td>@(category.CampingOnSiteAvailable ? L["Yes"] : L["No"])</td>
                            <td>@(category.TShirtAvailable ? L["Yes"] : L["No"])</td>
                            <td>@category.TShirtLink</td>
                            <td>
                                <button @onclick="() => EditCompetition(category)">@L["Edit"]</button>
                                <button @onclick="() => DeleteCompetition(category.Id)">@L["Delete"]</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </Authorized>
    <NotAuthorized>
        <p>@L["You're not logged in."]</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private CompetitionEditModal? competitionEditModal;
    private List<Competition>? competitions;
    private Competition currentCompetition = new Competition();

    protected override Task OnInitializedAsync()
    {
        LoadData();
        return Task.CompletedTask;
    }

    private async void LoadData()
    {
        competitions = await CompetitionService.GetCompetitionsForManagerAsync(await UserIdStateService.GetUserIdAsync());
        StateHasChanged();
    }

    private async Task AddNew()
    {
        currentCompetition = new Competition
        {
            CompetitionManagers = new List<CompetitionManager>
            {
                new CompetitionManager { ManagerId = await UserIdStateService.GetUserIdAsync() }
            }
        };
        competitionEditModal?.Open();
        StateHasChanged();
    }

    private void EditCompetition(Competition competition)
    {
        currentCompetition = competition;
        competitionEditModal?.Open();
        StateHasChanged();
    }

    private async Task DeleteCompetition(int competitionId)
    {
        if (confirmationDialog is null)
        {
            return;
        }

        var confirmed = await confirmationDialog.ShowAsync(
            L["Confirmation"].Value,
            L["Are you sure you want to delete this competition?"].Value,
            L["Yes"].Value,
            L["Cancel"].Value);

        if (confirmed)
        {
            await CompetitionService.DeleteCompetitionAsync(competitionId);
            LoadData();
        }
    }

    private Task HandleFormSubmit()
    {
        LoadData();
        return Task.CompletedTask;
    }

    private Task HandleModalClose()
    {
        LoadData();
        return Task.CompletedTask;
    }

    private ConfirmationDialog? confirmationDialog;
}
