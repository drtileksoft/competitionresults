@page "/"
@using System.Security.Claims
@using CompetitionResults.Data
@inject CompetitionService CompetitionService
@inject CompetitionStateService CompetitionState
@inject ResultService ResultsServiceInstance
@inject IJSRuntime JSRuntime;
@inject IStringLocalizer<SharedResource> L

<PageTitle>@L["Competition Scores"]</PageTitle>

<h1>@L["Competition Scores"]</h1>

<p>@L["App to make competition scoring easy and fast."]</p>

<AuthorizeView Roles="Admin">
    <Authorized>
        <button @onclick="CreateBackup">@L["Backup all data"]</button>
        @* <button @onclick="ClearDatabase">@L["Clear database"]</button> *@
        <button @onclick="ClearScores">@L["Clear competition scores"]</button>
        @* <button @onclick="FillRandomScores">@L["Fill random scores"]</button> *@
        <InputFile id="fileInput" accept=".json" multiple="false" OnChange="HandleFileSelected" style="display:none" />
        <button @onclick="TriggerFileInput">@L["Import all data"]</button>
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="Manager">
    <Authorized>
        <button @onclick="CreateCompBackup">@L["Backup competition data"]</button>
        <button @onclick="ClearScores">@L["Clear competition scores"]</button>
        <InputFile id="compfileInput" accept=".json" multiple="false" OnChange="HandleCompFileSelected" style="display:none" />
        <button @onclick="TriggerCompFileInput">@L["Import competition data"]</button>
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>

@code {

    protected override async Task OnInitializedAsync()
    {
    }

    private async void CreateBackup()
    {
        var jsonData = await CompetitionService.BackupAllAsync();

        if (!string.IsNullOrEmpty(jsonData))
        {
            // Construct a filename based on the current date/time or another scheme
            var now = DateTime.Now;
            var filename = $"backup_{now:yyyyMMddHHmmss}.json";

            // Invoke the JavaScript function to initiate the download
            await JSRuntime.InvokeVoidAsync("downloadJson", jsonData, filename);
        }
    }

    private async void ClearScores()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", L["Are you sure you want to clear all results?"].Value);
        if (confirmed)
        {
            await ResultsServiceInstance.DeleteResultsAsync(CompetitionState.SelectedCompetitionId);
        }
    }

    private async void FillRandomScores()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", L["Generate random scores for all disciplines and throwers?"].Value);
        if (confirmed)
        {
            await ResultsServiceInstance.FillRandomScoresAsync(CompetitionState.SelectedCompetitionId);
        }
    }

    private async void ClearDatabase()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", L["Are you sure you want to clear database?"].Value);
        if (confirmed)
        {
            await CompetitionService.ClearDBAsync();
        }
    }

    private async Task TriggerFileInput()
    {
        await JSRuntime.InvokeVoidAsync("triggerFileInput");
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream(2048000);
            using var reader = new System.IO.StreamReader(stream);
            var jsonData = await reader.ReadToEndAsync();

            await CompetitionService.RestoreAllAsync(jsonData);
        }
    }

    private async void CreateCompBackup()
    {
        var jsonData = await CompetitionService.BackupCompetitionAsync(CompetitionState.SelectedCompetitionId);

        if (!string.IsNullOrEmpty(jsonData))
        {
            // Construct a filename based on the current date/time or another scheme
            var now = DateTime.Now;
            var filename = $"backup_competition_{now:yyyyMMddHHmmss}.json";

            // Invoke the JavaScript function to initiate the download
            await JSRuntime.InvokeVoidAsync("downloadJson", jsonData, filename);
        }
    }

    private async Task TriggerCompFileInput()
    {
        await JSRuntime.InvokeVoidAsync("triggerCompFileInput");
    }

    private async Task HandleCompFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream(2048000);
            using var reader = new System.IO.StreamReader(stream);
            var jsonData = await reader.ReadToEndAsync();

            await CompetitionService.RestoreCompetitionAsync(jsonData);
        }
    }
}
