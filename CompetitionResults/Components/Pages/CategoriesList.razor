@page "/categories"
@using CompetitionResults.Data
@using CompetitionResults.Components.Shared
@inject CategoryService CategoryService
@inject CompetitionStateService CompetitionState
@implements IDisposable
@inject IStringLocalizer<SharedResource> L

<h3>@L["Categories List"]</h3>

<AuthorizeView Roles="Admin, Manager">
        <Authorized>
<button @onclick="AddNew">@L["Add New Category"]</button>

<CategoryEditModal @ref="categoryEditModal" OnClose="HandleModalClose" Category="currentCategory" OnFormSubmit="HandleFormSubmit" />
<ConfirmationDialog @ref="confirmationDialog" />

@if (categories == null)
{
    <p><em>@L["Loading..."]</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>@L["Name"]</th>
                <th>@L["Actions"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@category.Name</td>
                    <td>
                        <button @onclick="() => EditCategory(category)">@L["Edit"]</button>
                        <button @onclick="() => DeleteCategory(category.Id)">@L["Delete"]</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
    </Authorized>
    <NotAuthorized>
        <p>@L["You're not logged in."]</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private CategoryEditModal categoryEditModal;
    private List<Category> categories;
    private Category currentCategory = new Category();

    protected override async Task OnInitializedAsync()
    {
        CompetitionState.OnCompetitionChanged += LoadData;
        LoadData();
    }

    private async void LoadData()
    {
        categories = await CategoryService.GetAllCategoriesAsync(CompetitionState.SelectedCompetitionId);
        StateHasChanged();
    }

    public void Dispose()
    {
        CompetitionState.OnCompetitionChanged -= LoadData;
    }

    private void AddNew()
    {
        currentCategory = new Category { CompetitionId = CompetitionState.SelectedCompetitionId };
        categoryEditModal.Open();
        StateHasChanged();
    }

    private void EditCategory(Category category)
    {
        currentCategory = category;
        categoryEditModal.Open();
        StateHasChanged();
    }

    private async Task DeleteCategory(int categoryId)
    {
        if (confirmationDialog is null)
        {
            return;
        }

        var confirmed = await confirmationDialog.ShowAsync(
            L["Confirmation"].Value,
            L["Are you sure you want to delete this category?"].Value,
            L["Yes"].Value,
            L["Cancel"].Value);

        if (confirmed)
        {
            await CategoryService.DeleteCategoryAsync(categoryId);
            LoadData();
        }
    }

    private Task HandleFormSubmit()
    {
        LoadData();
        return Task.CompletedTask;
    }

    private Task HandleModalClose()
    {
        LoadData();
        return Task.CompletedTask;
    }

    private ConfirmationDialog? confirmationDialog;
}
