@page "/disciplines"
@using CompetitionResults.Data
@inject DisciplineService DisciplineService
@inject CompetitionStateService CompetitionState
@implements IDisposable
@inject IJSRuntime JSRuntime

<h3>Disciplines List</h3>
<AuthorizeView Roles="Admin, Manager">
	<Authorized>

<button @onclick="AddNew">Add New Discipline</button>

<DisciplineEditModal @ref="disciplineEditModal" OnClose="HandleModalClose" Discipline="currentDiscipline" OnFormSubmit="HandleFormSubmit" />

@if (disciplines == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Is Divided To Categories</th>
                <th>Has Positions Instead of Points</th>
                <th>Has Decimal Points</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var discipline in disciplines)
            {
                <tr>
                    <td>@discipline.Name</td>
                            <td>@(discipline.IsDividedToCategories ? "Yes" : "No")</td>
                            <td>@(discipline.HasPositionsInsteadPoints ? "Yes" : "No")</td>
                            <td>@(discipline.HasDecimalPoints ? "Yes" : "No")</td>
                    <td>
                        <button @onclick="() => EditDiscipline(discipline)">Edit</button>
                        <button @onclick="() => DeleteDiscipline(discipline.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

    </Authorized>
    <NotAuthorized>
        <p>You're not loggged in.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private DisciplineEditModal disciplineEditModal;
    private List<Discipline> disciplines;
    private Discipline currentDiscipline = new Discipline ();

    protected override async Task OnInitializedAsync()
    {
        CompetitionState.OnCompetitionChanged += LoadData;
        LoadData();
    }

    private async void LoadData()
    {
        disciplines = await DisciplineService.GetAllDisciplinesAsync(CompetitionState.SelectedCompetitionId);
        StateHasChanged();
    }

    public void Dispose()
    {
        CompetitionState.OnCompetitionChanged -= LoadData;
    }

    private void AddNew()
    {
        currentDiscipline = new Discipline { CompetitionId = CompetitionState.SelectedCompetitionId };
        disciplineEditModal.Open();
        StateHasChanged();
    }

    private void EditDiscipline(Discipline discipline)
    {
        currentDiscipline = discipline;
        disciplineEditModal.Open();
        StateHasChanged();
    }

    private async Task DeleteDiscipline(int disciplineId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this discipline?");
        if (confirmed)
        {
            await DisciplineService.DeleteDisciplineAsync(disciplineId);
            LoadData();
        }        
    }

    private async Task HandleFormSubmit()
    {
        LoadData();
    }

    private async Task HandleModalClose()
    {
        LoadData();
    }
}