// <auto-generated />
using System;
using CompetitionResults.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CompetitionResults.Migrations
{
    [DbContext(typeof(CompetitionDbContext))]
    [Migration("20240831124913_payment")]
    partial class payment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("CompetitionResults.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CompetitionResults.Data.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompetitionId = 1,
                            Name = "Men"
                        },
                        new
                        {
                            Id = 2,
                            CompetitionId = 1,
                            Name = "Women"
                        });
                });

            modelBuilder.Entity("CompetitionResults.Data.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Competitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Your competition name"
                        });
                });

            modelBuilder.Entity("CompetitionResults.Data.CompetitionManager", b =>
                {
                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ManagerId")
                        .HasColumnType("TEXT");

                    b.HasKey("CompetitionId", "ManagerId");

                    b.HasIndex("ManagerId");

                    b.ToTable("CompetitionManagers");
                });

            modelBuilder.Entity("CompetitionResults.Data.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasDecimalPoints")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasPositionsInsteadPoints")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDividedToCategories")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Disciplines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompetitionId = 1,
                            HasDecimalPoints = false,
                            HasPositionsInsteadPoints = false,
                            IsDividedToCategories = true,
                            Name = "Walkback Nospin"
                        },
                        new
                        {
                            Id = 2,
                            CompetitionId = 1,
                            HasDecimalPoints = false,
                            HasPositionsInsteadPoints = false,
                            IsDividedToCategories = true,
                            Name = "Walkback Knife"
                        },
                        new
                        {
                            Id = 3,
                            CompetitionId = 1,
                            HasDecimalPoints = false,
                            HasPositionsInsteadPoints = false,
                            IsDividedToCategories = true,
                            Name = "Walkback Axe"
                        },
                        new
                        {
                            Id = 4,
                            CompetitionId = 1,
                            HasDecimalPoints = true,
                            HasPositionsInsteadPoints = false,
                            IsDividedToCategories = true,
                            Name = "Long Distance Nospin"
                        },
                        new
                        {
                            Id = 5,
                            CompetitionId = 1,
                            HasDecimalPoints = true,
                            HasPositionsInsteadPoints = false,
                            IsDividedToCategories = true,
                            Name = "Long Distance Knife"
                        },
                        new
                        {
                            Id = 6,
                            CompetitionId = 1,
                            HasDecimalPoints = true,
                            HasPositionsInsteadPoints = false,
                            IsDividedToCategories = true,
                            Name = "Long Distance Axe"
                        },
                        new
                        {
                            Id = 7,
                            CompetitionId = 1,
                            HasDecimalPoints = false,
                            HasPositionsInsteadPoints = false,
                            IsDividedToCategories = false,
                            Name = "Silhouette Nospin"
                        },
                        new
                        {
                            Id = 8,
                            CompetitionId = 1,
                            HasDecimalPoints = false,
                            HasPositionsInsteadPoints = false,
                            IsDividedToCategories = false,
                            Name = "Silhouette Knife"
                        },
                        new
                        {
                            Id = 9,
                            CompetitionId = 1,
                            HasDecimalPoints = false,
                            HasPositionsInsteadPoints = false,
                            IsDividedToCategories = false,
                            Name = "Silhouette Axe"
                        },
                        new
                        {
                            Id = 11,
                            CompetitionId = 1,
                            HasDecimalPoints = false,
                            HasPositionsInsteadPoints = true,
                            IsDividedToCategories = false,
                            Name = "Coutanque"
                        },
                        new
                        {
                            Id = 12,
                            CompetitionId = 1,
                            HasDecimalPoints = false,
                            HasPositionsInsteadPoints = true,
                            IsDividedToCategories = false,
                            Name = "Duel"
                        });
                });

            modelBuilder.Entity("CompetitionResults.Data.Results", b =>
                {
                    b.Property<int>("ThrowerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Points")
                        .HasColumnType("REAL");

                    b.HasKey("ThrowerId", "DisciplineId", "CompetitionId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("DisciplineId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("CompetitionResults.Data.Thrower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClubName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCampingOnSite")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Payment")
                        .HasColumnType("REAL");

                    b.Property<bool>("PaymentDone")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("WantTShirt")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Throwers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            CompetitionId = 1,
                            IsCampingOnSite = false,
                            Name = "Zuzana",
                            Nationality = "CZ",
                            Nickname = "Suzanne KO",
                            PaymentDone = false,
                            Surname = "Koreňová",
                            WantTShirt = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CompetitionResults.Data.Category", b =>
                {
                    b.HasOne("CompetitionResults.Data.Competition", "Competition")
                        .WithMany("Categories")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("CompetitionResults.Data.CompetitionManager", b =>
                {
                    b.HasOne("CompetitionResults.Data.Competition", "Competition")
                        .WithMany("CompetitionManagers")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetitionResults.Data.ApplicationUser", "Manager")
                        .WithMany("CompetitionManagers")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("CompetitionResults.Data.Discipline", b =>
                {
                    b.HasOne("CompetitionResults.Data.Competition", "Competition")
                        .WithMany("Disciplines")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("CompetitionResults.Data.Results", b =>
                {
                    b.HasOne("CompetitionResults.Data.Competition", "Competition")
                        .WithMany("Results")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetitionResults.Data.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetitionResults.Data.Thrower", "Thrower")
                        .WithMany()
                        .HasForeignKey("ThrowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Discipline");

                    b.Navigation("Thrower");
                });

            modelBuilder.Entity("CompetitionResults.Data.Thrower", b =>
                {
                    b.HasOne("CompetitionResults.Data.Category", "Category")
                        .WithMany("Throwers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetitionResults.Data.Competition", "Competition")
                        .WithMany("Throwers")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CompetitionResults.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CompetitionResults.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetitionResults.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CompetitionResults.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompetitionResults.Data.ApplicationUser", b =>
                {
                    b.Navigation("CompetitionManagers");
                });

            modelBuilder.Entity("CompetitionResults.Data.Category", b =>
                {
                    b.Navigation("Throwers");
                });

            modelBuilder.Entity("CompetitionResults.Data.Competition", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("CompetitionManagers");

                    b.Navigation("Disciplines");

                    b.Navigation("Results");

                    b.Navigation("Throwers");
                });
#pragma warning restore 612, 618
        }
    }
}
